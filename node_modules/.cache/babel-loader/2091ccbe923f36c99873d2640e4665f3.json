{"ast":null,"code":"var _jsxFileName = \"/home/andras/Desktop/React_3/pet-shop-v3-cra/src/components/PetComponent.js\";\nimport React, { useState } from 'react';\n\nconst PetComponent = props => {\n  // useState is a Hook function that will give back an array\n  // The array contains a primitive variable or an object\n  // depending how we initialize it\n  // and also will give back a function to update the state.\n  // (the primitive variable or an object).\n  const [petsReceived, setPetsReceived] = useState(1);\n\n  const pet_fun = event => {\n    console.log(event); // Synthetic event\n\n    console.log(event.target);\n    event.target.style[\"backgroundColor\"] = props.color; //event.target.style.color = \"white\";\n    // alert(`*** The ${props.species} says ${props.noise} ***`);\n    // alert(`*** THe ${props.species} has been petted ${petsReceived} time(s)`);\n\n    setPetsReceived(petsReceived + 1); // *** Lifting State ***\n\n    console.log(props);\n    props.infoToParent(\"=> This is a string message from the pet!!!\");\n    props.infoToParent([{\n      animal: 'dog'\n    }, {\n      animal: 'Rabbit'\n    }]);\n  };\n\n  const pet_test = () => {\n    props.infoToParent('yes');\n  };\n\n  pet_test();\n  return React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"legend\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \" \", props.species, \" \"), React.createElement(\"button\", {\n    onClick: pet_test,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Pet the \", props.species));\n}; // PetComponent functional component ***\n\n\nexport default PetComponent;","map":{"version":3,"sources":["/home/andras/Desktop/React_3/pet-shop-v3-cra/src/components/PetComponent.js"],"names":["React","useState","PetComponent","props","petsReceived","setPetsReceived","pet_fun","event","console","log","target","style","color","infoToParent","animal","pet_test","species"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAIA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAE5B;AACA;AACA;AACA;AACA;AAEA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,CAAD,CAAhD;;AAGA,QAAMK,OAAO,GAAGC,KAAK,IAAI;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADuB,CACK;;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAlB;AACAH,IAAAA,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,iBAAnB,IAAyCR,KAAK,CAACS,KAA/C,CAHuB,CAIvB;AAGA;AACA;;AAEAP,IAAAA,eAAe,CAAED,YAAY,GAAG,CAAjB,CAAf,CAVuB,CAYvB;;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACAA,IAAAA,KAAK,CAACU,YAAN,CAAmB,6CAAnB;AACAV,IAAAA,KAAK,CAACU,YAAN,CAAoB,CAAE;AAACC,MAAAA,MAAM,EAAC;AAAR,KAAF,EAAkB;AAAEA,MAAAA,MAAM,EAAE;AAAV,KAAlB,CAApB;AACD,GAhBD;;AAmBA,QAAMC,QAAQ,GAAG,MAAM;AACrBZ,IAAAA,KAAK,CAACU,YAAN,CAAmB,KAAnB;AACD,GAFD;;AAIAE,EAAAA,QAAQ;AAER,SAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAWZ,KAAK,CAACa,OAAjB,MADF,EAEE;AAAQ,IAAA,OAAO,EAAGD,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAwCZ,KAAK,CAACa,OAA9C,CAFF,CAFF;AASD,CA7CD,C,CA6CE;;;AAGF,eAAed,YAAf","sourcesContent":["import React, {useState} from 'react';\n\n\n\nconst PetComponent = props => {\n\n  // useState is a Hook function that will give back an array\n  // The array contains a primitive variable or an object\n  // depending how we initialize it\n  // and also will give back a function to update the state.\n  // (the primitive variable or an object).\n\n  const [petsReceived, setPetsReceived] = useState(1);\n\n \n  const pet_fun = event => {\n    console.log(event);         // Synthetic event\n    console.log(event.target);\n    event.target.style[\"backgroundColor\"] =  props.color ;\n    //event.target.style.color = \"white\";\n\n    \n    // alert(`*** The ${props.species} says ${props.noise} ***`);\n    // alert(`*** THe ${props.species} has been petted ${petsReceived} time(s)`);\n    \n    setPetsReceived( petsReceived + 1);\n\n    // *** Lifting State ***\n    console.log(props);\n    props.infoToParent(\"=> This is a string message from the pet!!!\");\n    props.infoToParent( [ {animal:'dog'}, { animal: 'Rabbit'} ] );    \n  }\n\n\n  const pet_test = () => {\n    props.infoToParent('yes');\n  }\n  \n  pet_test();\n\n  return(\n\n    <fieldset>\n      <legend> { props.species } </legend>\n      <button onClick={ pet_test  }>Pet the { props.species }</button>\n    </fieldset>\n  \n  );\n\n} // PetComponent functional component ***\n\n\nexport default PetComponent;\n\n"]},"metadata":{},"sourceType":"module"}